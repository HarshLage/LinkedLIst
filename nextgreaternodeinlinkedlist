/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        vector<int>values;
        while(head!=NULL){
            values.push_back(head->val);
            head= head->next;
        }
        stack<int>st;
        int n = int(values.size());
        vector<int>ans(n);

        for(int i=0;i<n;i++){
            while(!st.empty() && values[st.top()] < values[i]){
                int smaller = st.top();
                st.pop();
                ans[smaller] = values[i];
            }
            st.push(i);
        }
        return ans;
    }
};/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        vector<int>values;
        while(head!=NULL){
            values.push_back(head->val);
            head= head->next;
        }
        stack<int>st;
        int n = int(values.size());
        vector<int>ans(n);

        for(int i=0;i<n;i++){
            while(!st.empty() && values[st.top()] < values[i]){
                int smaller = st.top();
                st.pop();
                ans[smaller] = values[i];
            }
            st.push(i);
        }
        return ans;
    }
};
